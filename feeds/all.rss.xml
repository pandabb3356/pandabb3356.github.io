<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>KH</title><link>https://pandabb3356.github.io/</link><description></description><lastBuildDate>Mon, 21 Aug 2023 18:36:42 +0800</lastBuildDate><item><title>Observer Pattern with Goroutines: Building Signal-Like Mechanisms in Go</title><link>https://pandabb3356.github.io/golang-observer-pattern-with-goroutines.html</link><description>&lt;p&gt;Dive into Go's powerful concurrency features to implement the observer pattern, replicating signal-like mechanisms for event-driven programming.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Ken Huang</dc:creator><pubDate>Mon, 21 Aug 2023 18:35:07 +0800</pubDate><guid isPermaLink="false">tag:pandabb3356.github.io,2023-08-21:/golang-observer-pattern-with-goroutines.html</guid><category>Golang</category><category>Golang</category><category>goroutines</category><category>observer pattern</category><category>signals</category><category>concurrency</category><category>design patterns</category></item><item><title>A Comprehensive Dive into `go-jet`</title><link>https://pandabb3356.github.io/golang-comprehensive-dive-into-go-jet.html</link><description>&lt;p&gt;An in-depth exploration of go-jet, the powerful SQL builder for Go, and its pivotal role in efficient database management.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Ken Huang</dc:creator><pubDate>Mon, 21 Aug 2023 14:19:14 +0800</pubDate><guid isPermaLink="false">tag:pandabb3356.github.io,2023-08-21:/golang-comprehensive-dive-into-go-jet.html</guid><category>Golang</category><category>golang</category><category>go-jet</category><category>databases</category><category>SQL</category><category>ORM</category></item><item><title>Pelican: Static Site Generation in Python</title><link>https://pandabb3356.github.io/pelican-static-site-generation-python.html</link><description>&lt;p&gt;An introduction to Pelican, a powerful static site generator built on Python, and its various features and applications.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Ken Huang</dc:creator><pubDate>Sat, 19 Aug 2023 10:53:23 +0800</pubDate><guid isPermaLink="false">tag:pandabb3356.github.io,2023-08-19:/pelican-static-site-generation-python.html</guid><category>Python</category><category>pelican</category><category>python</category><category>static-site-generation</category></item><item><title>Gensim - Topic Modelling in Python</title><link>https://pandabb3356.github.io/gensim-topic-modelling-python.html</link><description>&lt;p&gt;Dive into topic modelling in Python using the Gensim library, and understand how it can help organize and understand large sets of textual data.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Ken Huang</dc:creator><pubDate>Sat, 19 Aug 2023 10:47:10 +0800</pubDate><guid isPermaLink="false">tag:pandabb3356.github.io,2023-08-19:/gensim-topic-modelling-python.html</guid><category>Python</category><category>python</category><category>gensim</category><category>topic-modelling</category><category>NLP</category></item><item><title>Integrating pprof with Gin</title><link>https://pandabb3356.github.io/golang-gin-pprof-integration.html</link><description>&lt;p&gt;A step-by-step guide on how to integrate Go's pprof with the Gin web framework using gin-contrib/pprof.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Ken Huang</dc:creator><pubDate>Fri, 18 Aug 2023 21:43:46 +0800</pubDate><guid isPermaLink="false">tag:pandabb3356.github.io,2023-08-18:/golang-gin-pprof-integration.html</guid><category>Golang</category><category>golang</category><category>gin</category><category>pprof</category></item><item><title>Designing a Notification Service using Python</title><link>https://pandabb3356.github.io/designing-notification-service-python.html</link><description>&lt;p&gt;A guide on creating a Python-based notification service that integrates with multiple providers.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Ken Huang</dc:creator><pubDate>Thu, 17 Aug 2023 08:00:00 +0800</pubDate><guid isPermaLink="false">tag:pandabb3356.github.io,2023-08-17:/designing-notification-service-python.html</guid><category>Python</category><category>Notifications</category><category>Design</category><category>Python</category></item><item><title>Unleashing Python's Hidden Power: Profiling for Performance Optimization</title><link>https://pandabb3356.github.io/python-profiling-for-performance.html</link><description>&lt;p&gt;Profiling is a fundamental technique in software development that enables programmers to identify and rectify performance bottlenecks in their code. Python offers several built-in and third-party profiling tools to help developers optimize their applications.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Ken Huang</dc:creator><pubDate>Wed, 16 Aug 2023 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:pandabb3356.github.io,2023-08-16:/python-profiling-for-performance.html</guid><category>Python</category><category>Python</category><category>Profiling</category><category>cProfile</category><category>profile</category><category>memory-profiler</category><category>line-profiler</category></item><item><title>Mastering the Adapter Design Pattern in Go</title><link>https://pandabb3356.github.io/golang-adapter-pattern.html</link><description>&lt;p&gt;The Adapter design pattern is a structural pattern that allows objects with incompatible interfaces to work together. In this article, we'll explore the Adapter pattern in depth, discussing its principles, benefits, and providing advanced examples in Go.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Ken Huang</dc:creator><pubDate>Tue, 15 Aug 2023 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:pandabb3356.github.io,2023-08-15:/golang-adapter-pattern.html</guid><category>Golang</category><category>Golang</category><category>Design Patterns</category><category>Adapter Pattern</category></item><item><title>Exploring the Option Struct Pattern in Go</title><link>https://pandabb3356.github.io/golang-option-struct-pattern.html</link><description>&lt;p&gt;When working with the Go programming language, developers often encounter situations where functions may return values that could be missing or have a special meaning. The Option struct pattern is a powerful approach to address this, providing a clean and idiomatic way to handle optional values and errors. In this article, we'll delve into why and how Go uses the Option struct pattern.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Ken Huang</dc:creator><pubDate>Tue, 15 Aug 2023 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:pandabb3356.github.io,2023-08-15:/golang-option-struct-pattern.html</guid><category>Golang</category><category>Golang</category><category>Design Patterns</category><category>Option Struct</category><category>Error Handling</category></item><item><title>Implementing the Singleton Design Pattern in Go</title><link>https://pandabb3356.github.io/golang-singleton-pattern.html</link><description>&lt;p&gt;In software design, the Singleton pattern is a creational design pattern that ensures a class has only one instance and provides a global point of access to that instance.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Ken Huang</dc:creator><pubDate>Tue, 15 Aug 2023 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:pandabb3356.github.io,2023-08-15:/golang-singleton-pattern.html</guid><category>Golang</category><category>Golang</category><category>Design Patterns</category><category>Singleton</category></item></channel></rss>